{"ast":null,"code":"var _jsxFileName = \"C:\\\\SEMESTER 6\\\\5 - Software Quality Engineering\\\\SQE Project Code\\\\frontend\\\\src\\\\components\\\\videos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/videos.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Videos = () => {\n  _s();\n  const [videoNames, setVideoNames] = useState([]); // Store video names\n  const [selectedVideo, setSelectedVideo] = useState(null); // Store selected video details\n  const [playingVideoId, setPlayingVideoId] = useState(null); // Store currently playing video ID\n  const [file, setFile] = useState(null); // Store file for video upload\n  const [responseMessage, setResponseMessage] = useState(null); // Store response messages for UI\n  const [fileName, setFileName] = useState(\"\"); // Store the name of the selected file\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const videoRef = useRef(null); // Reference to the video player\n  const navigate = useNavigate(); // For navigation\n\n  const userId = localStorage.getItem(\"userId\");\n\n  // Fetch video names on component mount\n  useEffect(() => {\n    const fetchVideoNames = async () => {\n      try {\n        const response = await fetch(`http://localhost:5008/videos/names/${userId}`);\n        const data = await response.json();\n        console.log(\"data: \", data);\n        if (response.ok) {\n          setVideoNames(data.video_metadata || []); // Save video names in state\n        } else {\n          console.error(\"Error fetching video names:\", data.message);\n          setResponseMessage({\n            type: \"error\",\n            text: \"No Videos Yet.\"\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching video names:\", error);\n        setResponseMessage({\n          type: \"error\",\n          text: \"No videos yet.\"\n        });\n      }\n    };\n    fetchVideoNames();\n  }, []);\n\n  // Fetch specific video details when a video is clicked\n  const handleVideoSelect = async videoId => {\n    try {\n      console.log(`Fetching video with ID: ${videoId}`);\n      const response = await fetch(`http://localhost:5008/videos/${videoId}`);\n      const data = await response.json();\n      if (response.ok) {\n        var _videoNames$find;\n        console.log(\"Video fetched successfully:\", data);\n        setSelectedVideo({\n          id: videoId,\n          url: data.video_data,\n          // Update with the base64 video data\n          title: ((_videoNames$find = videoNames.find(v => v.id === videoId)) === null || _videoNames$find === void 0 ? void 0 : _videoNames$find.upload_name) || \"Untitled\"\n        });\n        setResponseMessage({\n          type: \"success\",\n          text: \"Video loaded successfully.\"\n        });\n      } else {\n        console.error(\"Error fetching video:\", data.message);\n        setResponseMessage({\n          type: \"error\",\n          text: \"Error loading video.\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching video:\", error);\n      setResponseMessage({\n        type: \"error\",\n        text: \"Error loading video.\"\n      });\n    }\n  };\n\n  // Handle play/pause video\n  const handlePlayPause = () => {\n    if (videoRef.current) {\n      if (playingVideoId === selectedVideo.id) {\n        console.log(\"Pausing video...\");\n        videoRef.current.pause();\n        setPlayingVideoId(null);\n      } else {\n        console.log(\"Playing video...\");\n        videoRef.current.play();\n        setPlayingVideoId(selectedVideo.id);\n      }\n    }\n  };\n\n  // Handle file input for video upload\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n    setFileName(selectedFile ? selectedFile.name : \"\");\n  };\n\n  // Upload video to the server\n  const handleUploadVideo = async () => {\n    if (!file) {\n      setResponseMessage({\n        type: \"error\",\n        text: \"Please select a video file to upload.\"\n      });\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"video\", file);\n    formData.append(\"user_id\", userId);\n    try {\n      setResponseMessage({\n        text: \"Uploading Video.....\"\n      });\n      const response = await fetch(\"http://localhost:5000/videos/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Video uploaded successfully:\", data);\n        setResponseMessage({\n          type: \"success\",\n          text: \"Video uploaded successfully!\"\n        });\n        setFile(null); // Clear file input after upload\n        setFileName(\"\");\n        await sleep(2000); // 2-second delay\n        window.location.reload();\n      } else {\n        console.error(\"Error uploading video:\", data.message);\n        setResponseMessage({\n          type: \"error\",\n          text: \"Cannot upload video, daily bandwidth or storage will exceed.\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error uploading video:\", error);\n      setResponseMessage({\n        type: \"error\",\n        text: \"Error uploading video.\"\n      });\n    }\n  };\n\n  // Handle video deletion\n  const handleDeleteVideo = async videoId => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete this video?\");\n    if (!confirmDelete) return;\n    try {\n      console.log(\"userid\", userId);\n      const response = await fetch(`http://localhost:5009/videos/delete/${videoId}?user_id=${userId}`, {\n        method: \"DELETE\"\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Video deleted successfully:\", data);\n        setResponseMessage({\n          type: \"success\",\n          text: \"Video deleted successfully!\"\n        });\n        // Delay before reloading\n        await sleep(2000); // 2-second delay\n        window.location.reload();\n      } else {\n        console.error(\"Error deleting video:\", data.message);\n        setResponseMessage({\n          type: \"error\",\n          text: \"Error deleting video.\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n      setResponseMessage({\n        type: \"error\",\n        text: \"Error deleting video.\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"videos-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"navigate-button\",\n      onClick: () => navigate(\"/dashboard\"),\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Video Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `response-message ${responseMessage.type}`,\n      children: responseMessage.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"video-upload\",\n        className: \"custom-file-label\",\n        children: \"Choose a video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"video-upload\",\n        accept: \".mp4, .avi, .mov, .mkv\" // Accept only specific video extensions\n        ,\n        onChange: handleFileChange,\n        style: {\n          display: \"none\"\n        } // Hide the default input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUploadVideo,\n        children: \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Video: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-names\",\n      children: videoNames.map((video, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"video-name-button\",\n          onClick: () => handleVideoSelect(video.id),\n          children: video.upload_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-video-button\",\n          onClick: () => handleDeleteVideo(video.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, `${video.id}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), selectedVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-player-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedVideo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          controls: true,\n          width: \"100%\",\n          src: `data:video/mp4;base64,${selectedVideo.url}` // Set the src for the video\n          ,\n          onClick: handlePlayPause,\n          children: \"Your browser does not support the video tag.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"video-description\",\n          children: selectedVideo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"video-name-button\",\n          children: \"Watch Another\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(Videos, \"AFdf6Gi9afnU8hcYY1Ftp7ZENZU=\", false, function () {\n  return [useNavigate];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","Videos","_s","videoNames","setVideoNames","selectedVideo","setSelectedVideo","playingVideoId","setPlayingVideoId","file","setFile","responseMessage","setResponseMessage","fileName","setFileName","sleep","ms","Promise","resolve","setTimeout","videoRef","navigate","userId","localStorage","getItem","fetchVideoNames","response","fetch","data","json","console","log","ok","video_metadata","error","message","type","text","handleVideoSelect","videoId","_videoNames$find","id","url","video_data","title","find","v","upload_name","handlePlayPause","current","pause","play","handleFileChange","e","selectedFile","target","files","name","handleUploadVideo","formData","FormData","append","method","body","window","location","reload","handleDeleteVideo","confirmDelete","confirm","className","children","onClick","_jsxFileName","lineNumber","columnNumber","htmlFor","accept","onChange","style","display","map","video","index","ref","controls","width","src","description","_c","$RefreshReg$"],"sources":["C:/SEMESTER 6/5 - Software Quality Engineering/SQE Project Code/frontend/src/components/videos.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./../styles/videos.css\"; // Import the CSS file\r\n\r\nconst Videos = () => {\r\n  const [videoNames, setVideoNames] = useState([]); // Store video names\r\n  const [selectedVideo, setSelectedVideo] = useState(null); // Store selected video details\r\n  const [playingVideoId, setPlayingVideoId] = useState(null); // Store currently playing video ID\r\n  const [file, setFile] = useState(null); // Store file for video upload\r\n  const [responseMessage, setResponseMessage] = useState(null); // Store response messages for UI\r\n  const [fileName, setFileName] = useState(\"\"); // Store the name of the selected file\r\n  const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const videoRef = useRef(null); // Reference to the video player\r\n  const navigate = useNavigate(); // For navigation\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  // Fetch video names on component mount\r\n  useEffect(() => {\r\n    const fetchVideoNames = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5008/videos/names/${userId}`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"data: \", data);\r\n\r\n        if (response.ok) {\r\n          setVideoNames(data.video_metadata || []); // Save video names in state\r\n        } else {\r\n          console.error(\"Error fetching video names:\", data.message);\r\n          setResponseMessage({ type: \"error\", text: \"No Videos Yet.\" });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching video names:\", error);\r\n        setResponseMessage({ type: \"error\", text: \"No videos yet.\" });\r\n      }\r\n    };\r\n    fetchVideoNames();\r\n  }, []);\r\n\r\n  // Fetch specific video details when a video is clicked\r\n  const handleVideoSelect = async (videoId) => {\r\n    try {\r\n      console.log(`Fetching video with ID: ${videoId}`);\r\n      const response = await fetch(\r\n        `http://localhost:5008/videos/${videoId}`\r\n      );\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        console.log(\"Video fetched successfully:\", data);\r\n        setSelectedVideo({\r\n          id: videoId,\r\n          url: data.video_data, // Update with the base64 video data\r\n          title:\r\n            videoNames.find((v) => v.id === videoId)?.upload_name || \"Untitled\",\r\n        });\r\n        setResponseMessage({\r\n          type: \"success\",\r\n          text: \"Video loaded successfully.\",\r\n        });\r\n      } else {\r\n        console.error(\"Error fetching video:\", data.message);\r\n        setResponseMessage({ type: \"error\", text: \"Error loading video.\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching video:\", error);\r\n      setResponseMessage({ type: \"error\", text: \"Error loading video.\" });\r\n    }\r\n  };\r\n\r\n  // Handle play/pause video\r\n  const handlePlayPause = () => {\r\n    if (videoRef.current) {\r\n      if (playingVideoId === selectedVideo.id) {\r\n        console.log(\"Pausing video...\");\r\n        videoRef.current.pause();\r\n        setPlayingVideoId(null);\r\n      } else {\r\n        console.log(\"Playing video...\");\r\n        videoRef.current.play();\r\n        setPlayingVideoId(selectedVideo.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle file input for video upload\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    setFile(selectedFile);\r\n    setFileName(selectedFile ? selectedFile.name : \"\");\r\n  };\r\n\r\n  // Upload video to the server\r\n  const handleUploadVideo = async () => {\r\n    if (!file) {\r\n      setResponseMessage({\r\n        type: \"error\",\r\n        text: \"Please select a video file to upload.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"video\", file);\r\n    formData.append(\"user_id\", userId);\r\n\r\n    try {\r\n      setResponseMessage({\r\n        text: \"Uploading Video.....\",\r\n      });\r\n      const response = await fetch(\r\n        \"http://localhost:5000/videos/upload\",\r\n        {\r\n          method: \"POST\",\r\n          body: formData,\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"Video uploaded successfully:\", data);\r\n        setResponseMessage({\r\n          type: \"success\",\r\n          text: \"Video uploaded successfully!\",\r\n        });\r\n        setFile(null); // Clear file input after upload\r\n        setFileName(\"\");\r\n        await sleep(2000); // 2-second delay\r\n        window.location.reload();\r\n      } else {\r\n        console.error(\"Error uploading video:\", data.message);\r\n        setResponseMessage({\r\n          type: \"error\",\r\n          text: \"Cannot upload video, daily bandwidth or storage will exceed.\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading video:\", error);\r\n      setResponseMessage({ type: \"error\", text: \"Error uploading video.\" });\r\n    }\r\n  };\r\n\r\n  // Handle video deletion\r\n  const handleDeleteVideo = async (videoId) => {\r\n    const confirmDelete = window.confirm(\r\n      \"Are you sure you want to delete this video?\"\r\n    );\r\n    if (!confirmDelete) return;\r\n\r\n    try {\r\n      console.log(\"userid\", userId);\r\n      const response = await fetch(\r\n        `http://localhost:5009/videos/delete/${videoId}?user_id=${userId}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"Video deleted successfully:\", data);\r\n        setResponseMessage({\r\n          type: \"success\",\r\n          text: \"Video deleted successfully!\",\r\n        });\r\n        // Delay before reloading\r\n        await sleep(2000); // 2-second delay\r\n        window.location.reload();\r\n      } else {\r\n        console.error(\"Error deleting video:\", data.message);\r\n        setResponseMessage({ type: \"error\", text: \"Error deleting video.\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting video:\", error);\r\n      setResponseMessage({ type: \"error\", text: \"Error deleting video.\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videos-container\">\r\n      <button\r\n        className=\"navigate-button\"\r\n        onClick={() => navigate(\"/dashboard\")}\r\n      >\r\n        Back\r\n      </button>\r\n      <h2>Video Gallery</h2>\r\n\r\n      {/* Display Response Message */}\r\n      {responseMessage && (\r\n        <div className={`response-message ${responseMessage.type}`}>\r\n          {responseMessage.text}\r\n        </div>\r\n      )}\r\n\r\n      {/* Video Upload Section */}\r\n      <div className=\"upload-section\">\r\n        <h3>Upload Video</h3>\r\n        <label htmlFor=\"video-upload\" className=\"custom-file-label\">\r\n          Choose a video\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          id=\"video-upload\"\r\n          accept=\".mp4, .avi, .mov, .mkv\" // Accept only specific video extensions\r\n          onChange={handleFileChange}\r\n          style={{ display: \"none\" }} // Hide the default input\r\n        />\r\n        <button onClick={handleUploadVideo}>Upload Video</button>\r\n        {fileName && <p>Selected Video: {fileName}</p>}\r\n      </div>\r\n\r\n      {/* List of clickable video names */}\r\n      <div className=\"video-names\">\r\n        {videoNames.map((video, index) => (\r\n          <div key={`${video.id}-${index}`} className=\"video-item\">\r\n            <button\r\n              className=\"video-name-button\"\r\n              onClick={() => handleVideoSelect(video.id)}\r\n            >\r\n              {video.upload_name}\r\n            </button>\r\n            <button\r\n              className=\"delete-video-button\"\r\n              onClick={() => handleDeleteVideo(video.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Selected video details */}\r\n      {selectedVideo && (\r\n        <div className=\"video-section\">\r\n  <div className=\"video-player-container\">\r\n    <h3>{selectedVideo.title}</h3>\r\n    <video\r\n      ref={videoRef}\r\n      controls\r\n      width=\"100%\"\r\n      src={`data:video/mp4;base64,${selectedVideo.url}`} // Set the src for the video\r\n      onClick={handlePlayPause}\r\n    >\r\n      Your browser does not support the video tag.\r\n    </video>\r\n    <p className=\"video-description\">{selectedVideo.description}</p>\r\n    <button className=\"video-name-button\">Watch Another</button>\r\n  </div>\r\n        </div>\r\n\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Videos;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}